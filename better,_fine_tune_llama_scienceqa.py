# -*- coding: utf-8 -*-
"""better, Fine-tune Llama scienceQA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NipHjYM2Qjknmaq40-kGaC6yDJM5dZ_N
"""

!pip install -q -U transformers datasets accelerate peft trl bitsandbytes wandb

from google.colab import userdata

# Defined in the secrets tab in Google Colab
hf_token = userdata.get('huggingface')

import os
import torch
from datasets import load_dataset
from transformers import (
    AutoModelForCausalLM,
    AutoTokenizer,
    BitsAndBytesConfig,
    AutoTokenizer,
    TrainingArguments,
    pipeline,
)
from peft import LoraConfig, PeftModel, prepare_model_for_kbit_training
from trl import SFTTrainer

from datasets import DatasetDict

# Model
base_model = "NousResearch/Llama-2-7b-hf"
new_model = "llama-2-7b-ScienceQA"

# Dataset
dataset = load_dataset("Aashi/Science_Q_and_A_dataset")
train_testvalid = dataset['train'].train_test_split(test_size=0.2)
# Split the 10% test + valid in half test, half valid
test_valid = train_testvalid['test'].train_test_split(test_size=0.5)
# gather everyone if you want to have a single DatasetDict
dataset = DatasetDict({
    'train': train_testvalid['train'],
    'test': test_valid['test'],
    'valid': test_valid['train']})

# Tokenizer
tokenizer = AutoTokenizer.from_pretrained(base_model, use_fast=True)
tokenizer.pad_token = tokenizer.unk_token
tokenizer.padding_side = "right"

dataset

"""Learn more about padding [in the following article](https://medium.com/towards-data-science/padding-large-language-models-examples-with-llama-2-199fb10df8ff) written by Benjamin Marie."""

# Quantization configuration
bnb_config = BitsAndBytesConfig(
    load_in_4bit=True,
    bnb_4bit_quant_type="nf4",
    bnb_4bit_compute_dtype=torch.float16,
    bnb_4bit_use_double_quant=True,
)

# LoRA configuration
peft_config = LoraConfig(
    r=16,
    lora_alpha=32,
    lora_dropout=0.05,
    bias="none",
    task_type="CAUSAL_LM",
    target_modules=['up_proj', 'down_proj', 'gate_proj', 'k_proj', 'q_proj', 'v_proj', 'o_proj']
)

# Load base moodel
model = AutoModelForCausalLM.from_pretrained(
    base_model,
    quantization_config=bnb_config,
    device_map={"": 0}
)

# Cast the layernorm in fp32, make output embedding layer require grads, add the upcasting of the lmhead to fp32
model = prepare_model_for_kbit_training(model)

# Run text generation pipeline with our model
prompt = "What are the two main types of mixtures?"
instruction = f"###:Question \n{prompt}\n\n### Context:\n"
pipe = pipeline(task="text-generation", model=prepare_model_for_kbit_training(model), tokenizer=tokenizer, max_length=256)
result = pipe(instruction)
print(result[0]['generated_text'][len(instruction):])

# Set training arguments
training_arguments = TrainingArguments(
        output_dir="./results3",
        num_train_epochs=3,
        per_device_train_batch_size=1,
        gradient_accumulation_steps=1,
        evaluation_strategy="steps",
        eval_steps=1000,
        logging_steps=1,
        optim="paged_adamw_8bit",
        learning_rate=2e-4,
        lr_scheduler_type="linear",
        warmup_steps=10,
        #report_to="wandb",
       max_steps=100, # Remove this line for a real fine-tuning
)

# Set supervised fine-tuning parameters
trainer = SFTTrainer(
    model=model,
    train_dataset=dataset['train'],
    eval_dataset=dataset,
    peft_config=peft_config,
    dataset_text_field="Context",
    max_seq_length=512,
    tokenizer=tokenizer,
    args=training_arguments,
)

# Train model
trainer.train()

# Save trained model
trainer.model.save_pretrained(new_model)

"""![](https://i.imgur.com/bBf6ARw.png)

See Hugging Face's [Llama implementation](https://github.com/huggingface/transformers/blob/main/src/transformers/models/llama/modeling_llama.py#L229C4-L229C4) for more information about target modules.

Weights & Biases is a great tool to track the training progress. Here is an example of a CodeLlama training run:

![](https://i.imgur.com/oiMhW9Z.png)
"""

# Run text generation pipeline with our model
prompt = "What are the two main types of mixtures?"
instruction = f"### Question:\n{prompt}\n\n### Context:\n"
pipe = pipeline(task="text-generation", model=model, tokenizer=tokenizer, max_length=256)
result = pipe(instruction)
print(result[0]['generated_text'][len(instruction):])

# Run text generation pipeline with our model
prompt = "What are the two main types of mixtures?"
instruction = f"### Question:\n{prompt}\n\n### Context:\n"
pipe = pipeline(task="text-generation", model=model, tokenizer=tokenizer, max_length=256)
result = pipe(instruction)
print(result[0]['generated_text'][len(instruction):])

# Run text generation pipeline with our model
prompt = "What are the two main types of mixtures?"
instruction = f"### Question:\n{prompt}\n\n### Context:\n"
pipe = pipeline(task="text-generation", model=model, tokenizer=tokenizer, max_length=256)
result = pipe(instruction)
print(result[0]['generated_text'][len(instruction):])

# Run text generation pipeline with our model
prompt = "What are the two main types of mixtures?"
instruction = f"### Question:\n{prompt}\n\n### Context:\n"
pipe = pipeline(task="text-generation", model=model, tokenizer=tokenizer, max_length=256)
result = pipe(instruction)
print(result[0]['generated_text'][len(instruction):])

# Run text generation pipeline with our model
prompt = "What are the two main types of mixtures?"
instruction = f"### Question:\n{prompt}\n\n### Context:\n"
pipe = pipeline(task="text-generation", model=model, tokenizer=tokenizer, max_length=256)
result = pipe(instruction)
print(result[0]['generated_text'][len(instruction):])

!git config --global user.email "scandypradaptap@gmail.com"
!git config --global user.name "ScandyPradapta"

!echo "ScandyPradapta/LLama2-Chatbot-AI.git" >> README.md
!git init
!git add README.md
!git commit -m "first commit"
!git branch -M Main
!git remote add origin ScandyPradapta/LLama2-Chatbot-AI.git
!git push -u origin Main

!pip install streamlit

import streamlit as st

#create a storage
if "messages" not in st.session_state:
  st.session_state.messages = []


#create the chat interface
for message in st.session_state.messages:
  with st.chat_message(message["role"]):
    st.markdown(message["content"])

prompt = st.chat_input("Ask me all about chemistry")

if prompt :
      #Add the user message to the chat history
      st.session_state.messages.append({"role": "user", "content": prompt})
      #Display what was typed
      with st.chat_message("user", avatar="ðŸ¤‘"):
          st.write(prompt)

      with st.chat_message("bot", avatar="ðŸ¤–"):
          st.write(prompt)